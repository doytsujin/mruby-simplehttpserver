{"name":"Simple HTTP Server for mruby","tagline":"mruby-simplehttpserver is a HTTP Server with less dependency for mruby","body":"# mruby-simplehttpserver   [![Build Status](https://travis-ci.org/matsumoto-r/mruby-simplehttpserver.svg?branch=master)](https://travis-ci.org/matsumoto-r/mruby-simplehttpserver)\r\n\r\nmruby-simplehttpserver is a HTTP Server with less dependency for mruby. mruby-simplehttpserver depends on mruby-io, mruby-socket and mruby-http. A Web server using mruby-simplehttpserver run on a environment which is not very rich like [OSv](http://osv.io/) or simple Linux box.\r\n\r\n## install by mrbgems \r\n#### add conf.gem line to `build_config.rb` \r\n```ruby\r\nMRuby::Build.new do |conf|\r\n\r\n    # ... (snip) ...\r\n\r\n    conf.gem :github => 'iij/mruby-io'\r\n    conf.gem :github => 'iij/mruby-socket'\r\n    conf.gem :github => 'mattn/mruby-http'\r\n    conf.gem :github => 'matsumoto-r/mruby-simplehttpserver'\r\nend\r\n```\r\n#### run mruby\r\n```bash\r\n./bin/mruby server.rb\r\n```\r\n## License\r\nunder the MIT License:\r\n- see LICENSE file\r\n\r\n## example server.rb\r\n```ruby\r\n# \r\n# Server Configration\r\n# \r\n\r\nserver = SimpleHttpServer.new({\r\n\r\n  :server_ip => \"0.0.0.0\",\r\n  :port  =>  8000,\r\n  :document_root => \"./\",\r\n})\r\n\r\n\r\n#\r\n# HTTP Initialize Configuration Per Request\r\n#\r\n\r\n# You can use request parameters at http or location configration\r\n#   r.method\r\n#   r.schema\r\n#   r.host\r\n#   r.port\r\n#   r.path\r\n#   r.query\r\n#   r.headers\r\n#   r.body\r\n\r\nserver.http do |r|\r\n  server.set_response_headers({\r\n    \"Server\" => \"my-mruby-simplehttpserver\",\r\n    \"Date\" => server.http_date,\r\n  })\r\nend\r\n\r\n# \r\n# Location Configration\r\n# \r\n\r\n# /mruby location config\r\nserver.location \"/mruby\" do |r|\r\n  if r.method == \"POST\"\r\n    server.response_body = \"Hello mruby World. Your post is '#{r.body}'\\n\"\r\n  else\r\n    server.response_body = \"Hello mruby World at '#{r.path}'\\n\"\r\n  end\r\n  server.create_response\r\nend\r\n\r\n# /mruby/ruby location config, location config longest match\r\nserver.location \"/mruby/ruby\" do |r|\r\n  server.response_body = \"Hello mruby World. longest matche.\\n\"\r\n  server.create_response\r\nend\r\n\r\nserver.location \"/html\" do |r|\r\n  server.set_response_headers \"Content-type\" => \"text/html; charset=utf-8\"\r\n  # or server.response_headers << \"Content-type\" => \"text/html; charset=utf-8\"\r\n  server.response_body = \"<H1>Hello mruby World.</H1>\\n\"\r\n  server.create_response\r\nend\r\n\r\n# Custom error response message\r\nserver.location \"/notfound\" do |r|\r\n  server.response_body = \"Not Found on this server: #{r.path}\\n\"\r\n  server.create_response 404\r\nend\r\n\r\n# Static html file contents\r\nserver.location \"/static/\" do |r|\r\n  response = \"\"\r\n  is_dir = r.path[-1] == '/'\r\n  is_html = r.path.split(\".\")[-1] == \"html\"\r\n\r\n  if r.method == 'GET' && is_dir || is_html\r\n    filename = server.config[:document_root] + r.path + (is_dir ? 'index.html' : '')\r\n    begin\r\n      fp = File.open filename\r\n      server.set_response_headers \"Content-Type\" => \"text/html; charset=utf-8\"\r\n      # TODO: Add last-modified header, need File.mtime but not implemented\r\n      server.response_body = fp.read\r\n      response = server.create_response\r\n    rescue File::FileError\r\n      server.response_body = \"Not Found on this server: #{r.path}\\n\"\r\n      response = server.create_response 404\r\n    rescue\r\n      server.response_body = \"Internal Server Error\\n\"\r\n      response = server.create_response 500\r\n    ensure\r\n      fp.close if fp\r\n    end\r\n  else\r\n    server.response_body = \"Service Unavailable\\n\"\r\n    response = server.create_response 503\r\n  end\r\n  response\r\nend\r\n\r\nserver.run\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}